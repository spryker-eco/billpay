<?php

/**
 * MIT License
 * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
 */

namespace SprykerEco\Shared\Billpay;

class BillpayConfig
{
    const PAYMENT_PROVIDER = 'Billpay';
    const INVOICE = 'INVOICE';

    //PROVIDER ERROR CODES
    const IPL_CORE_ERROR_CODE_SUCCESS = 0;
    const IPL_CORE_ERROR_CODE_TIMEOUT = 1;
    const IPL_CORE_ERROR_CODE_SOCKET_ERROR = 2;
    const IPL_CORE_ERROR_CODE_CURL_INIT_ERROR = 3;
    const IPL_CORE_ERROR_CODE_INVALID_HTTP_RESPONSE = 4;
    const IPL_CORE_ERROR_CODE_INVALID_HTTP_HEADER = 5;
    const IPL_CORE_ERROR_CODE_HTTP_ERROR_CODE_RECEIVED = 6;
    const IPL_CORE_ERROR_CODE_REQUEST_URL_IS_EMPTY = 7;
    const IPL_CORE_ERROR_CODE_UNKNOWN_HTTP_CLIENT = 8;
    const IPL_CORE_ERROR_CODE_UNKNOWN_XML_PARSER_LIB = 9;
    const IPL_CORE_ERROR_CODE_INVALID_XML_RESPONSE_RECEIVED = 10;
    const IPL_CORE_ERROR_CODE_FEATURE_NOT_IMPLEMENTED = 11;
    const IPL_CORE_ERROR_CODE_ERROR_PARSING_RESULT = 12;
    const IPL_CORE_ERROR_CODE_CURL_LIB_NOT_LOADED = 13;
    const IPL_CORE_ERROR_CODE_PARSE_FUNCTION_NOT_FOUND = 14;
    const IPL_CORE_ERROR_CODE_SIMPLEXML_LIB_NOT_LOADED = 15;
    const IPL_CORE_ERROR_CODE_REDIRECT_RESPONSE_RECEIVED = 16;
    const IPL_CORE_ERROR_CODE_UNSUPPORTED_PROTOCOL_VERSION = 17;
    const IPL_CORE_ERROR_CODE_TOO_MANY_REDIRECTS = 18;

    // Constants taken from ipl_xml_api.php
    const IPL_CORE_PAYMENT_TYPE_INVOICE = 1;
    const IPL_CORE_PAYMENT_TYPE_DIRECT_DEBIT = 2;
    const IPL_CORE_PAYMENT_TYPE_RATE_PAYMENT = 3;
    const IPL_CORE_PAYMENT_TYPE_PAY_LATER = 4;
    const IPL_CORE_PAYMENT_TYPE_PAY_LATER_COLLATERAL_PROMISE = 7;
    const IPL_CORE_PAYMENT_TYPE_INVOICE_COLLATERAL_PROMISE = 8;
    const IPL_CORE_PAYMENT_TYPE_DIRECT_DEBIT_COLLATERAL_PROMISE = 9;

    /** Billpay payment method codes */
    const INVOICE_B2C = 'INVOICE_B2C';
    const INVOICE_B2B = 'INVOICE_B2B';

    /**
     * Payment methods
     */
    const METHOD_INVOICE = 'INVOICE';

    const RESPONSE_STATUS_DENIED = 'DENIED';
    const RESPONSE_STATUS_APPROVED = 'APPROVED';
    const RESPONSE_STATUS_PRE_APPROVED = 'PRE_APPROVED';

    const BILLPAY_OMS_STATUS_ITEM_CANCELLED = 'item cancelled';
    const BILLPAY_OMS_STATUS_PREAUTHORIZED = 'preauthorized';
    const BILPAY_OMS_STATUS_PAID = 'paid';
    const BILLPAY_OMS_STATUS_CLOSED = 'closed';
    const BILLPAY_OMS_STATUS_PREAUTHORIZATION_FAILED = 'preauthorized_failed';
    const BILLPAY_OMS_STATUS_INVOICE_CREATED = 'invoice created';
    const BILLPAY_OMS_STATUS_NEW = 'new';
    const BILLPAY_OMS_STATUS_CANCELLED = 'cancelled';

    //PROVIDER CONSTANTS
    const CUSTOMER_TYPE_GUEST = 'g';
    const CUSTOMER_TYPE_EXISTING_CUSTOMER = 'e';
    const CUSTOMER_TYPE_NEW_CUSTOMER = 'n';
    const CUSTOMER_GROUP_B2C = 'p';
    const CUSTOMER_GROUP_B2B = 'b';
    const CUSTOMER_GROUP = 'BILLPAY::CUSTOMER_GROUP';

    const PROVIDER_NAME = 'billpay';
    const PAYMENT_METHOD_INVOICE = 'billpayInvoice';
    /**
     * A list of methods
     */
    const AVAILABLE_PROVIDER_METHODS = [
        self::INVOICE_B2C,
    ];
    
    const PAYMENT_METHODS_MAP = [
        self::METHOD_INVOICE => self::IPL_CORE_PAYMENT_TYPE_INVOICE,
    ];
}
